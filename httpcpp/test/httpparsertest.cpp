/*
    <one line to give the library's name and an idea of what it does.>
    Copyright (C) 2013  <copyright holder> <email>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <array>
#include <string>
#include <tuple>
#include <vector>

#include "http.h"
#include "httprequestparser.h"

#include <gtest/gtest.h>


TEST ( HttpRequestParser, ParseRange ) {
	//Range: bytes=0-999
	std::tuple<int, int> range1 = http::utils::parseRange ( "bytes=0-999" );
	EXPECT_EQ ( 0, std::get<0> ( range1 ) );
	EXPECT_EQ ( 999, std::get<1> ( range1 ) );

	//Range: bytes=0-
	std::tuple<int, int> range2 = http::utils::parseRange ( "bytes=0-" );
	EXPECT_EQ ( 0, std::get<0> ( range2 ) );
	EXPECT_EQ ( -1, std::get<1> ( range2 ) );

	//Range: bytes=999-
	std::tuple<int, int> range3 = http::utils::parseRange ( "bytes=999-" );
	EXPECT_EQ ( 999, std::get<0> ( range3 ) );
	EXPECT_EQ ( -1, std::get<1> ( range3 ) );
}

TEST ( HttpRequestParser, ParseWithBody ) {

	char const * _request = "POST /ctl/ContentDir HTTP/1.0\r\n"
							"Host: 192.168.0.13\r\n"
							"User-Agent: Twisted PageGetter\r\n"
							"Content-Length: 438\r\n"
							"SOAPACTION: \"urn:schemas-upnp-org:service:ContentDirectory:1#Browse\"\r\n"
							"content-type: text/xml ;charset=\"utf-8\"\r\n"
							"connection: close\r\n"
							"\r\n"
							"<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:ns0=\"urn:schemas-upnp-org:service:ContentDirectory:1\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body><ns0:Browse><ObjectID>0</ObjectID><BrowseFlag>BrowseMetadata</BrowseFlag><Filter>*</Filter><StartingIndex>0</StartingIndex><RequestedCount>0</RequestedCount><SortCriteria /></ns0:Browse></s:Body></s:Envelope>";

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < strlen ( _request ); i++ ) {
		request[i] = _request[i];
	}

	char const * response = "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:ns0=\"urn:schemas-upnp-org:service:ContentDirectory:1\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body><ns0:Browse><ObjectID>0</ObjectID><BrowseFlag>BrowseMetadata</BrowseFlag><Filter>*</Filter><StartingIndex>0</StartingIndex><RequestedCount>0</RequestedCount><SortCriteria /></ns0:Browse></s:Body></s:Envelope>";

	http::HttpRequest http_request;
	http::HttpRequestParser parser;
	size_t state = parser.parse_http_request ( http_request, request, strlen ( _request ) );
	EXPECT_EQ ( 236, state );
	EXPECT_EQ ( std::string ( "POST" ), http_request.method() );
	EXPECT_EQ ( std::string ( "/ctl/ContentDir" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 0, http_request.httpVersionMinor() );

	EXPECT_EQ ( http_request.parameterMap().size(), 6 );
	EXPECT_EQ ( std::string ( "192.168.0.13" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "close" ), http_request.parameter ( "Connection" ) );

	char * response_buffer = new char[438];

	for ( int i = 0; i < 438; i++ ) {
		response_buffer[i] = _request[i + state];
	}

	EXPECT_EQ ( std::string ( response ), std::string ( response_buffer ) );
	delete response_buffer;
}
TEST ( HttpRequestParser, ParseSSDPNotify ) {

	char const * _request = "NOTIFY * HTTP/1.1\r\n"
							"Cache-Control: max-age=1800\r\n"
							"Content-Length: 0\r\n"
							"DATE: Sat Dec 28 09:59:08 2013\r\n"
							"Host: 239.255.255.250:1900\r\n"
							"Location: http://192.168.0.13:8080/rootDesc.xml\r\n"
							"Nt: upnp:rootdevice\r\n"
							"Nts: ssdp:alive\r\n"
							"Server: Linux/#1 SMP Debian 3.2.51-1 DLNADOC/1.50 UPnP/1.0 Squawk/1.0.0\r\n"
							"Usn: uuid:a11fd44b-7377-578c-893d-8b02b3454397\r\n"
							"\r\n";

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < strlen ( _request ); i++ ) {
		request[i] = _request[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, strlen ( _request ) );
	EXPECT_EQ ( strlen ( _request ), state );
	EXPECT_EQ ( std::string ( "NOTIFY" ), http_request.method() );
	EXPECT_EQ ( std::string ( "*" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 1, http_request.httpVersionMinor() );


	EXPECT_EQ ( http_request.parameterMap().size(), 9 );
	EXPECT_EQ ( std::string ( "239.255.255.250:1900" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "Sat Dec 28 09:59:08 2013" ), http_request.parameter ( "Date" ) );
	EXPECT_EQ ( std::string ( "ssdp:alive" ), http_request.parameter ( "Nts" ) );

	EXPECT_EQ ( 0, http_request.requestBody().size() );
}

TEST ( HttpRequestParser, ParseGetParameter ) {

	char _request[] = {
		0x47, 0x45, 0x54, 0x20, 0x2f, 0x73, 0x75, 0x63,
		0x68, 0x65, 0x2f, 0x3f, 0x71, 0x3d, 0x70, 0x6f,
		0x73, 0x74, 0x26, 0x73, 0x65, 0x61, 0x72, 0x63,
		0x68, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
		0x2e, 0x78, 0x3d, 0x2d, 0x39, 0x33, 0x32, 0x26,
		0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73,
		0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x79, 0x3d,
		0x2d, 0x31, 0x32, 0x26, 0x72, 0x6d, 0x3d, 0x73,
		0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x48, 0x54,
		0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a,
		0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x77, 0x77,
		0x77, 0x2e, 0x68, 0x65, 0x69, 0x73, 0x65, 0x2e,
		0x64, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
		0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20,
		0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69,
		0x76, 0x65, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65,
		0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74,
		0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x61, 0x70,
		0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
		0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x2b,
		0x78, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c,
		0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
		0x78, 0x6d, 0x6c, 0x3b, 0x71, 0x3d, 0x30, 0x2e,
		0x39, 0x2c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f,
		0x77, 0x65, 0x62, 0x70, 0x2c, 0x2a, 0x2f, 0x2a,
		0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a,
		0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
		0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69,
		0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20,
		0x28, 0x58, 0x31, 0x31, 0x3b, 0x20, 0x4c, 0x69,
		0x6e, 0x75, 0x78, 0x20, 0x69, 0x36, 0x38, 0x36,
		0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57,
		0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x35, 0x33,
		0x37, 0x2e, 0x33, 0x36, 0x20, 0x28, 0x4b, 0x48,
		0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b,
		0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29,
		0x20, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f,
		0x33, 0x31, 0x2e, 0x30, 0x2e, 0x31, 0x36, 0x35,
		0x30, 0x2e, 0x36, 0x33, 0x20, 0x53, 0x61, 0x66,
		0x61, 0x72, 0x69, 0x2f, 0x35, 0x33, 0x37, 0x2e,
		0x33, 0x36, 0x0d, 0x0a, 0x52, 0x65, 0x66, 0x65,
		0x72, 0x65, 0x72, 0x3a, 0x20, 0x68, 0x74, 0x74,
		0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
		0x68, 0x65, 0x69, 0x73, 0x65, 0x2e, 0x64, 0x65,
		0x2f, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70,
		0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
		0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70,
		0x2c, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65,
		0x2c, 0x73, 0x64, 0x63, 0x68, 0x0d, 0x0a, 0x41,
		0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61,
		0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20,
		0x65, 0x6e, 0x2d, 0x55, 0x53, 0x2c, 0x65, 0x6e,
		0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a,
		0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3a, 0x20,
		0x77, 0x74, 0x33, 0x5f, 0x65, 0x69, 0x64, 0x3d,
		0x25, 0x33, 0x42, 0x32, 0x38, 0x38, 0x36, 0x38,
		0x39, 0x36, 0x33, 0x36, 0x39, 0x32, 0x30, 0x31,
		0x37, 0x34, 0x25, 0x37, 0x43, 0x32, 0x31, 0x33,
		0x38, 0x38, 0x32, 0x33, 0x38, 0x30, 0x37, 0x35,
		0x30, 0x30, 0x33, 0x39, 0x36, 0x32, 0x35, 0x37,
		0x3b, 0x20, 0x77, 0x74, 0x33, 0x5f, 0x73, 0x69,
		0x64, 0x3d, 0x25, 0x33, 0x42, 0x32, 0x38, 0x38,
		0x36, 0x38, 0x39, 0x36, 0x33, 0x36, 0x39, 0x32,
		0x30, 0x31, 0x37, 0x34, 0x0d, 0x0a, 0x0d, 0x0a
	};

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < sizeof ( _request ); i++ ) {
		request[i] = _request[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, sizeof ( _request ) );
	EXPECT_EQ ( sizeof ( _request ), state );
	EXPECT_EQ ( std::string ( "GET" ), http_request.method() );
	EXPECT_EQ ( std::string ( "/suche/" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 1, http_request.httpVersionMinor() );


	EXPECT_EQ ( http_request.parameterMap().size(), 8 );
	EXPECT_EQ ( std::string ( "www.heise.de" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "keep-alive" ), http_request.parameter ( "Connection" ) );
	EXPECT_EQ ( std::string ( "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" ), http_request.parameter ( "Accept" ) );
	EXPECT_EQ ( std::string ( "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36" ), http_request.parameter ( "User-Agent" ) );
	EXPECT_EQ ( std::string ( "http://www.heise.de/" ), http_request.parameter ( "Referer" ) );
	EXPECT_EQ ( std::string ( "gzip,deflate,sdch" ), http_request.parameter ( "Accept-Encoding" ) );
	EXPECT_EQ ( std::string ( "en-US,en;q=0.8" ), http_request.parameter ( "Accept-Language" ) );
	EXPECT_EQ ( std::string ( "wt3_eid=%3B288689636920174%7C2138823807500396257; wt3_sid=%3B288689636920174" ), http_request.parameter ( "Cookie" ) );

	// ?q=post&search_submit.x=-932&search_submit.y=-12&rm=search

	EXPECT_EQ ( 4, http_request.attributeMap().size() );
	EXPECT_EQ ( std::string ( "post" ), http_request.attribute ( "q" ) );
	EXPECT_EQ ( std::string ( "-932" ), http_request.attribute ( "search_submit.x" ) );
	EXPECT_EQ ( std::string ( "-12" ), http_request.attribute ( "search_submit.y" ) );
	EXPECT_EQ ( std::string ( "search" ), http_request.attribute ( "rm" ) );

	EXPECT_EQ ( 0, http_request.requestBody().size() );
}

TEST ( HttpRequestParser, ParseSSDPSearch ) {

	char _request[] = {
		0x4d, 0x2d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
		0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f,
		0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x4f, 0x53,
		0x54, 0x3a, 0x20, 0x32, 0x33, 0x39, 0x2e, 0x32,
		0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x32,
		0x35, 0x30, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d,
		0x0a, 0x4d, 0x41, 0x4e, 0x3a, 0x20, 0x22, 0x73,
		0x73, 0x64, 0x70, 0x3a, 0x64, 0x69, 0x73, 0x63,
		0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d,
		0x58, 0x3a, 0x20, 0x35, 0x0d, 0x0a, 0x53, 0x54,
		0x3a, 0x20, 0x73, 0x73, 0x64, 0x70, 0x3a, 0x61,
		0x6c, 0x6c, 0x0d, 0x0a, 0x0d, 0x0a
	};

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < sizeof ( _request ); i++ ) {
		request[i] = _request[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, sizeof ( _request ) );
	EXPECT_EQ ( sizeof ( _request ), state );
	EXPECT_EQ ( std::string ( "M-SEARCH" ), http_request.method() );
	EXPECT_EQ ( std::string ( "*" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 1, http_request.httpVersionMinor() );

	EXPECT_EQ ( http_request.parameterMap().size(), 4 );
	EXPECT_EQ ( std::string ( "239.255.255.250:1900" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "\"ssdp:discover\"" ), http_request.parameter ( "Man" ) );
	EXPECT_EQ ( std::string ( "5" ), http_request.parameter ( "Mx" ) );
	EXPECT_EQ ( std::string ( "ssdp:all" ), http_request.parameter ( "St" ) );
}
TEST ( HttpRequestParser, ParseSSDPSearchSamsung ) {

	char _request[] = {
		0x4d, 0x2d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
		0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f,
		0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x4f, 0x53,
		0x54, 0x3a, 0x20, 0x32, 0x33, 0x39, 0x2e, 0x32,
		0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x32,
		0x35, 0x30, 0x3a, 0x31, 0x39, 0x30, 0x30, 0x0d,
		0x0a, 0x4d, 0x41, 0x4e, 0x3a, 0x20, 0x22, 0x73,
		0x73, 0x64, 0x70, 0x3a, 0x64, 0x69, 0x73, 0x63,
		0x6f, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x4d,
		0x58, 0x3a, 0x20, 0x33, 0x0d, 0x0a, 0x53, 0x54,
		0x3a, 0x20, 0x75, 0x72, 0x6e, 0x3a, 0x73, 0x63,
		0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75, 0x70,
		0x6e, 0x70, 0x2d, 0x6f, 0x72, 0x67, 0x3a, 0x64,
		0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x4d, 0x65,
		0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x3a, 0x31, 0x0d, 0x0a, 0x43, 0x4f, 0x4e,
		0x54, 0x45, 0x4e, 0x54, 0x2d, 0x4c, 0x45, 0x4e,
		0x47, 0x54, 0x48, 0x3a, 0x20, 0x30, 0x0d, 0x0a,
		0x0d, 0x0a
	};

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < sizeof ( _request ); i++ ) {
		request[i] = _request[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, sizeof ( _request ) );
	EXPECT_EQ ( sizeof ( _request ), state );
	EXPECT_EQ ( std::string ( "M-SEARCH" ), http_request.method() );
	EXPECT_EQ ( std::string ( "*" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 1, http_request.httpVersionMinor() );

	EXPECT_EQ ( http_request.parameterMap().size(), 5 );
	EXPECT_EQ ( std::string ( "239.255.255.250:1900" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "\"ssdp:discover\"" ), http_request.parameter ( "Man" ) );
	EXPECT_EQ ( std::string ( "3" ), http_request.parameter ( "Mx" ) );
	EXPECT_EQ ( std::string ( "urn:schemas-upnp-org:device:MediaServer:1" ), http_request.parameter ( "St" ) );
	EXPECT_EQ ( std::string ( "0" ), http_request.parameter ( "Content-Length" ) );
}

TEST ( HttpRequestParser, NormalizeKey ) {

	EXPECT_EQ ( std::string ( "Content-Type" ), http::utils::normalize_key ( std::string ( "CONTENT-TYPE" ) ) );
	EXPECT_EQ ( std::string ( "Content-Type" ), http::utils::normalize_key ( std::string ( "content-type" ) ) );
	EXPECT_EQ ( std::string ( "Content-Type" ), http::utils::normalize_key ( std::string ( "Content-Type" ) ) );

}

TEST ( HttpRequestParser, ParseIncompleteHeader ) {

	char const * _request = "NOTIFY * HTTP/1.1\r\n"
							"Cache-Control: max-age=1800\r\n"
							"Content-Length: 0\r\n"
							"DATE: Sat Dec 28 09:59:08 2013\r\n"
							"Host: 239.255.255.250:1900\r\n";

	/*
	  "Location: http://192.168.0.13:8080/rootDesc.xml\r\n"
	  "Nt: upnp:rootdevice\r\n"
	  "Nts: ssdp:alive\r\n"
	  "Server: Linux/#1 SMP Debian 3.2.51-1 DLNADOC/1.50 UPnP/1.0 Squawk/1.0.0\r\n"
	  "Usn: uuid:a11fd44b-7377-578c-893d-8b02b3454397\r\n"
	  "\r\n"; */

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < strlen ( _request ); i++ ) {
		request[i] = _request[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, strlen ( _request ) );
	EXPECT_EQ ( state, 0 );

	/*TODO  EXPECT_EQ(std::string("NOTIFY"), http_request.method());
	    EXPECT_EQ(std::string("*"), http_request.uri);
	    EXPECT_EQ(std::string("HTTP"), http_request.protocol());
	    EXPECT_EQ(1, http_request.httpVersionMajor());
	    EXPECT_EQ(1, http_request.httpVersionMinor());


	    EXPECT_EQ(http_request.request_lines.size(), 9);
	    EXPECT_EQ(std::string("239.255.255.250:1900"), http_request.request_lines["Host"]);
	    EXPECT_EQ(std::string("Sat Dec 28 09:59:08 2013"), http_request.request_lines["Date"]);
	    EXPECT_EQ(std::string("ssdp:alive"), http_request.request_lines["Nts"]);

	    EXPECT_EQ(0, http_request.body.size()); */
}
TEST ( HttpRequestParser, ParseChunkedRequest ) {
	/*
	POST /ctl/ContentDir HTTP/1.1
	User-Agent: Android/4.4.2 UPnP/1.0 Cling/2.0
	Soapaction: "urn:schemas-upnp-org:service:ContentDirectory:1#Browse"
	Content-Type: text/xml;charset="utf-8"
	Host: 192.168.0.13:8080
	Content-Length: 469

	<?xml version="1.0" encoding="utf-8" standalone="yes"?><s:Envelope s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body><u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1"><ObjectID>0</ObjectID><BrowseFlag>BrowseDirectChildren</BrowseFlag><Filter>*</Filter><StartingIndex>0</StartingIndex><RequestedCount>50</RequestedCount><SortCriteria></SortCriteria></u:Browse></s:Body></s:Envelope>
	 */
	char peer0_0[] = {
		0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x63, 0x74,
		0x6c, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
		0x74, 0x44, 0x69, 0x72, 0x20, 0x48, 0x54, 0x54,
		0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x55,
		0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e,
		0x74, 0x3a, 0x20, 0x41, 0x6e, 0x64, 0x72, 0x6f,
		0x69, 0x64, 0x2f, 0x34, 0x2e, 0x34, 0x2e, 0x32,
		0x20, 0x55, 0x50, 0x6e, 0x50, 0x2f, 0x31, 0x2e,
		0x30, 0x20, 0x43, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
		0x32, 0x2e, 0x30, 0x0d, 0x0a, 0x53, 0x6f, 0x61,
		0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
		0x20, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73, 0x63,
		0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75, 0x70,
		0x6e, 0x70, 0x2d, 0x6f, 0x72, 0x67, 0x3a, 0x73,
		0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x43,
		0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69,
		0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3a,
		0x31, 0x23, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
		0x22, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
		0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a,
		0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x78, 0x6d,
		0x6c, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
		0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38,
		0x22, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a,
		0x20, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38,
		0x2e, 0x30, 0x2e, 0x31, 0x33, 0x3a, 0x38, 0x30,
		0x38, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
		0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67,
		0x74, 0x68, 0x3a, 0x20, 0x34, 0x36, 0x39, 0x0d,
		0x0a, 0x0d, 0x0a
	};

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < sizeof ( peer0_0 ); i++ ) {
		request[i] = peer0_0[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, sizeof ( peer0_0 ) );
	EXPECT_EQ ( sizeof ( peer0_0 ), state );
}
TEST ( HttpRequestParser, ParseChunkedRequest2 ) {
	/*
	POST /ctl/ContentDir HTTP/1.0
	Content-Type: text/xml; charset="utf-8"
	HOST: 192.168.0.13
	Content-Length: 530
	SOAPACTION: "urn:schemas-upnp-org:service:ContentDirectory:1#Browse"
	Connection: close
	User-Agent: SEC_HHP_iMediaShare/1.0

	<?xml version="1.0" encoding="utf-8"?>
	<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
	   <s:Body>
	      <u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1">
	         <ObjectID>0</ObjectID>
	         <BrowseFlag>BrowseMetadata</BrowseFlag>
	         <Filter>*</Filter>
	         <StartingIndex>0</StartingIndex>
	         <RequestedCount>0</RequestedCount>
	         <SortCriteria></SortCriteria>
	      </u:Browse>
	   </s:Body>
	</s:Envelope>
	 */
	char peer0_0[] = {
		0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x63, 0x74,
		0x6c, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
		0x74, 0x44, 0x69, 0x72, 0x20, 0x48, 0x54, 0x54,
		0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43,
		0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54,
		0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78,
		0x74, 0x2f, 0x78, 0x6d, 0x6c, 0x3b, 0x20, 0x63,
		0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
		0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x0d, 0x0a,
		0x48, 0x4f, 0x53, 0x54, 0x3a, 0x20, 0x31, 0x39,
		0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x30, 0x2e,
		0x31, 0x33, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
		0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67,
		0x74, 0x68, 0x3a, 0x20, 0x35, 0x33, 0x30, 0x0d,
		0x0a, 0x53, 0x4f, 0x41, 0x50, 0x41, 0x43, 0x54,
		0x49, 0x4f, 0x4e, 0x3a, 0x20, 0x22, 0x75, 0x72,
		0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
		0x73, 0x2d, 0x75, 0x70, 0x6e, 0x70, 0x2d, 0x6f,
		0x72, 0x67, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69,
		0x63, 0x65, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
		0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
		0x6f, 0x72, 0x79, 0x3a, 0x31, 0x23, 0x42, 0x72,
		0x6f, 0x77, 0x73, 0x65, 0x22, 0x0d, 0x0a, 0x43,
		0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
		0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65,
		0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41,
		0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x45,
		0x43, 0x5f, 0x48, 0x48, 0x50, 0x5f, 0x69, 0x4d,
		0x65, 0x64, 0x69, 0x61, 0x53, 0x68, 0x61, 0x72,
		0x65, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a
	};
	char peer0_1[] = {
		0x0d, 0x0a, 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20,
		0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d,
		0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e,
		0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22,
		0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3f, 0x3e,
		0x0a, 0x3c, 0x73, 0x3a, 0x45, 0x6e, 0x76, 0x65,
		0x6c, 0x6f, 0x70, 0x65, 0x20, 0x78, 0x6d, 0x6c,
		0x6e, 0x73, 0x3a, 0x73, 0x3d, 0x22, 0x68, 0x74,
		0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x63, 0x68,
		0x65, 0x6d, 0x61, 0x73, 0x2e, 0x78, 0x6d, 0x6c,
		0x73, 0x6f, 0x61, 0x70, 0x2e, 0x6f, 0x72, 0x67,
		0x2f, 0x73, 0x6f, 0x61, 0x70, 0x2f, 0x65, 0x6e,
		0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2f, 0x22,
		0x20, 0x73, 0x3a, 0x65, 0x6e, 0x63, 0x6f, 0x64,
		0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65,
		0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
		0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
		0x2e, 0x78, 0x6d, 0x6c, 0x73, 0x6f, 0x61, 0x70,
		0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x6f, 0x61,
		0x70, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
		0x6e, 0x67, 0x2f, 0x22, 0x3e, 0x0a, 0x20, 0x20,
		0x20, 0x3c, 0x73, 0x3a, 0x42, 0x6f, 0x64, 0x79,
		0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x3c, 0x75, 0x3a, 0x42, 0x72, 0x6f, 0x77, 0x73,
		0x65, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,
		0x75, 0x3d, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73,
		0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75,
		0x70, 0x6e, 0x70, 0x2d, 0x6f, 0x72, 0x67, 0x3a,
		0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
		0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
		0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
		0x3a, 0x31, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x4f,
		0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3e,
		0x30, 0x3c, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63,
		0x74, 0x49, 0x44, 0x3e, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x42,
		0x72, 0x6f, 0x77, 0x73, 0x65, 0x46, 0x6c, 0x61,
		0x67, 0x3e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
		0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
		0x3c, 0x2f, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
		0x46, 0x6c, 0x61, 0x67, 0x3e, 0x0a, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c,
		0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3e, 0x2a,
		0x3c, 0x2f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
		0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x3c, 0x53, 0x74, 0x61, 0x72,
		0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65,
		0x78, 0x3e, 0x30, 0x3c, 0x2f, 0x53, 0x74, 0x61,
		0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
		0x65, 0x78, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x65,
		0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
		0x6f, 0x75, 0x6e, 0x74, 0x3e, 0x30, 0x3c, 0x2f,
		0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
		0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3e, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x3c, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72,
		0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x3e, 0x3c,
		0x2f, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69,
		0x74, 0x65, 0x72, 0x69, 0x61, 0x3e, 0x0a, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x75,
		0x3a, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x3e,
		0x0a, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x73, 0x3a,
		0x42, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
		0x73, 0x3a, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
		0x70, 0x65, 0x3e, 0x0a
	};

	std::array<char, http::BUFFER_SIZE> request;

	for ( size_t i = 0; i < sizeof ( peer0_0 ); i++ ) {
		request[i] = peer0_0[i];
	}

	std::array<char, http::BUFFER_SIZE> request2;

	for ( size_t i = 0; i < sizeof ( peer0_1 ); i++ ) {
		request2[i] = peer0_1[i];
	}

	http::HttpRequest http_request;
	http::HttpRequestParser http_parser;
	size_t state = http_parser.parse_http_request ( http_request, request, sizeof ( peer0_0 ) );
	EXPECT_EQ ( 0, state );
	state = http_parser.parse_http_request ( http_request, request2, sizeof ( peer0_1 ) );
	EXPECT_EQ ( 2, state );

	EXPECT_EQ ( std::string ( "POST" ), http_request.method() );
	EXPECT_EQ ( std::string ( "/ctl/ContentDir" ), http_request.uri() );
	EXPECT_EQ ( std::string ( "HTTP" ), http_request.protocol() );
	EXPECT_EQ ( 1, http_request.httpVersionMajor() );
	EXPECT_EQ ( 0, http_request.httpVersionMinor() );

	EXPECT_EQ ( http_request.parameterMap().size(), 6 );
	EXPECT_EQ ( std::string ( "text/xml; charset=\"utf-8\"" ), http_request.parameter ( "Content-Type" ) );
	EXPECT_EQ ( std::string ( "192.168.0.13" ), http_request.parameter ( "Host" ) );
	EXPECT_EQ ( std::string ( "530" ), http_request.parameter ( "Content-Length" ) );
	EXPECT_EQ ( std::string ( "\"urn:schemas-upnp-org:service:ContentDirectory:1#Browse\"" ), http_request.parameter ( "Soapaction" ) );
	EXPECT_EQ ( std::string ( "close" ), http_request.parameter ( "Connection" ) );
	EXPECT_EQ ( std::string ( "SEC_HHP_iMediaShare/1.0" ), http_request.parameter ( "User-Agent" ) );
}

